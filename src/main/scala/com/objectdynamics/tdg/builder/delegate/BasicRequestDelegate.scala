package com.objectdynamics.tdg.builder.delegate;import com.objectdynamics.tdg.asyncmessages._import com.objectdynamics.tdg.builder.model._import com.objectdynamics.tdg.util.LogContributorimport scala.concurrent.SyncVar;/**  * Created by IntelliJ IDEA.  * User: Lee  * Date: Dec 9, 2010  * Time: 1:15:51 AM  *  */class BasicRequestDelegate(override val builder: IDataSetBuilder)  extends RequestDelegate(builder) with LogContributor {  val dsName: String = builder.dataSetSpec.name;  var foreignSyncMap: Map[String, SyncVar[List[IDataRow]]] = Map.empty;  log("BasicRequestDelegate(" + dsName + ") created.");  var sharedDistList: List[Distribution] = List[Distribution]();  var uniqueDistList: List[Distribution] = List[Distribution]();  /// set the reqData corresponding to the SyncVar  def onDataReceived(reqData: RequestedData) = {    log("BasicRequestDelegate(" + dsName + ") onDataReceived(" + reqData + ")");    foreignSyncMap.get(reqData.requestId) match {      case Some(sv: SyncVar[List[IDataRow]]) => sv.set(reqData.data)      case None => {}    }  };  override def onInitDelegate(fMap: Map[String, SyncVar[List[IDataRow]]]) = {    foreignSyncMap = fMap;  };  /// create the proper distribution  def onRequest(rvr: RowValueRequest) = {    log("BasicRequestDelegate(" + dsName + ") onRequest(" + rvr + ")");    //  b ::: List(1)    if (rvr.unique) {      this.uniqueDistList = createUnique(rvr) :: uniqueDistList;      log("BasicRequestDelegate(" + dsName + ") new UniqueDistList:" + uniqueDistList)    }    else {      this.sharedDistList = createShared(rvr) :: sharedDistList;      log("BasicRequestDelegate(" + dsName + ") new SharedDistList:" + sharedDistList)    };  };  def createUnique(rvr: RowValueRequest): Distribution = new UniqueDistribution(rvr);  def createShared(rvr: RowValueRequest): Distribution = new SharedDistribution(new SharedDistData).add(rvr);  def onPartialRow(dataSet: String, pRow: IDataRow) = {    onDataRow(dataSet, pRow);  };  /**    * For each PartialRow send we add it to a unique distibution if any    * if no unique, add it to a shared distribution    *    */  def onDataRow(dataSet: String, pRow: IDataRow) = {    // log("BasicRequestDelegate(" + dsName + ") onDataRow(" + dataSet + "" + pRow + ")");    // rowUsed, uniqueDistList    var retVal: (Boolean, List[Distribution]) = applyPartialToUnique(pRow, uniqueDistList);    if (!retVal._1) {      retVal = applyPartialToShared(pRow);      sharedDistList = retVal._2;    }  };  /**    *    */  def applyPartialToUnique(pRow: IDataRow, uniqueDistList: List[Distribution]): (Boolean, List[Distribution]) = {    // log("BasicRequestDelegate(" + dsName + ") applyPartialToUnique(" + pRow + "" + uniqueDistList + ")");    val udists: List[Distribution] = uniqueDistList filter { d: Distribution => d.needsRow(pRow) };    udists match {      case h :: t => (true, h.process(pRow) :: t)      case Nil => (false, uniqueDistList)    };  };  //applyPartialToUnique  def applyPartialToShared(pRow: IDataRow): (Boolean, List[Distribution]) = {    // log("BasicRequestDelegate(" + dsName + ") applyPartialToShared(" + pRow + "" + sharedDistList + ")");    var usedVal: Boolean = false;    val newDistList: List[Distribution] = sharedDistList map {      d: Distribution =>        if (d.needsRow(pRow)) {          usedVal = true;          d.process(pRow)        }        else {          d        }    };    (usedVal, newDistList);  };  //applyPartialToShared  def onStop() = {    log("BasicRequestDelegate(" + dsName + ") onStop()");    exit();  };}